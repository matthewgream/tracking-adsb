#!/usr/bin/node

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

const tools = { ...require('./tools-geometry.js'), ...require('./tools-formats.js') };

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

const CACHE_EXPIRY_TIME = 5 * 60;
const ALERT_EXPIRY_TIME = 5 * 60;
const CYCLE_SCAN_TIME = 30;

async function do_yield() {
    return await new Promise((resolve) => setImmediate(resolve));
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// modules
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

function deliverInit(config) {
    const { DeliveryMechanics } = require('./deliver-mechanics.js');
    const deliver = new DeliveryMechanics(config);
    console.error(`deliver: ${deliver.getInfo()}`);
    return deliver;
}

function flightsInit(config) {
    const { FlightDataFetcher } = require('./flights-data.js');
    const fetcher = new FlightDataFetcher({
        retries: 5,
        mappings: {
            debug: true,
            filename: './.cache-hexcodes.json',
            expiryTime: 90 * 24 * 60 * 60 * 1000, // 90 days for local
            onlineExpiryTime: 180 * 24 * 60 * 60 * 1000, // 180 days for online
            fetchOnline: true,
            fetchMode: 'missing', // 'missing', 'all', or 'none'
            fetchQueueInterval: 2000,
            fetchBatchSize: 10,
            ...config.mappings, // Allow override from config
        },
        ...config,
    });
    console.error(`flights: ${fetcher.getInfo()}`);
    if (fetcher.mappings) console.error(`mappings: ${fetcher.mappings.getInfo()}`);
    return fetcher;
}

function airportsInit(config, { location, range, vicinity }) {
    const airports = require('./airports-data.js')(config);
    console.error(`airports: ${airports.getInfo()}`);
    if (range || vicinity) {
        const info = [];
        if (range) {
            const ar = airports.findNearby(location.lat, location.lon, { distance: tools.nmToKm(range).value });
            info.push(`${ar.length} in range (${range}nm/${tools.nmToKm(range).value.toFixed(0)}km)`);
        }
        if (vicinity) {
            const av = airports.findNearby(location.lat, location.lon, { distance: vicinity });
            const vicinityList =
                av.length > 0
                    ? `: ${av
                          .slice(0, 5)
                          .map((a) => tools.formatAirport(a))
                          .join(', ')}${av.length > 5 ? ' +' + av.length - 5 + ' more' : ''}`
                    : '';
            info.push(`${av.length} in vicinity (${vicinity}km)${vicinityList}`);
        }
        if (info.length > 0) console.error(`airports-range: ${info.join('; ')}`);
    }
    return airports;
}

function furtherInit(config) {
    const dataFurther = Object.fromEntries(
        Object.entries(config)
            .filter(([name]) => name !== 'data')
            .map(([name, options]) => {
                let data;
                try {
                    data = new (require(`./data-${name}.js`))({ ...options, directory: '../content' });
                    console.error(`data-${name}: ${data.getInfo()}`);
                } catch (e) {
                    console.error(`data [${name}]: could not be loaded:`, e);
                }
                return [name, data];
            })
    );

    const { DataLoader } = require('./function-data.js');
    const dataDirectory = config.data?.directory || '../content';
    const dataLoader = new DataLoader(dataDirectory);
    if (config.data?.preload && Array.isArray(config.data?.preload))
        for (const filename of config.data.preload) {
            try {
                const data = dataLoader.load(filename);
                console.error(`data-file[${filename}]${data.info ? ': ' + data.info : ''}`);
            } catch (e) {
                console.warn(`data-file[${filename}]: could be not preloaded:`, e.message);
            }
        }

    return {
        ...dataFurther,
        loader: dataLoader,
    };
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

const { AircraftData } = require('./aircraft-data.js');

// ------------------------------------------------------------------------------------------------------------------------------------------------------------

const filterModules = [
    require('./filter-emergency.js'), // refactored
    require('./filter-attribute.js'), // refactored
    //
    require('./filter-anomaly.js'),
    require('./filter-weather.js'),
    // require('./filter-performance.js'), // too many false positives
    //
    require('./filter-airprox.js'),
    require('./filter-airport.js'), // refactored
    require('./filter-landing.js'),
    require('./filter-lifting.js'),
    require('./filter-loitering.js'),
    require('./filter-vicinity.js'),
    require('./filter-overhead.js'),
];

function filterInit(config, extra) {
    const filterSet = filterModules.filter((filter) => config[filter.id]?.enabled == undefined || config[filter.id]?.enabled);
    const filterMap = Object.fromEntries(filterSet.map((module) => [module.id, module]));
    filterSet.forEach((filter) => filter.config(config[filter.id], extra));
    console.error(
        `filters: ${filterModules.length} available, ${filterSet.length} enabled: ${filterSet
            .sort((a, b) => a.priority - b.priority)
            .map((filter) => filter.id + ':' + filter.priority)
            .join(', ')}`
    );
    return { filterSet, filterMap };
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------

async function flightsProcess(filters, aircraftList) {
    const { filterSet } = filters;

    let count = 0,
        cycle = 50;
    const filtered = [];
    for (const aircraft of aircraftList) {
        const aircraftData = new AircraftData(aircraft);
        for (const filter of filterSet) filter.preprocess(aircraft, { aircraftList, aircraftData });
        aircraft.calculated._matchedFilters = filterSet.filter((filter) => filter.evaluate(aircraft));
        if (aircraft.calculated._matchedFilters.length > 0) filtered.push(aircraft);
        if (++count % cycle === 0) await do_yield();
    }
    for (const filter of filterSet) if (filter.postprocess) filter.postprocess({ aircraftList });

    const sorted = filtered.sort((a, b) => {
        const aFilters = a.calculated._matchedFilters,
            bFilters = b.calculated._matchedFilters;
        const aPriority = Math.min(...aFilters.map((f) => f.priority)),
            bPriority = Math.min(...bFilters.map((f) => f.priority));

        if (aPriority !== bPriority) {
            if (config.debug?.sorting) console.error(`[SORT] ${a.flight} vs ${b.flight}: priority ${aPriority} vs ${bPriority} => ${aPriority - bPriority}`);
            return aPriority - bPriority;
        }

        const commonFilters = aFilters.filter((f) => f.priority === aPriority && bFilters.some((bf) => bf.id === f.id && bf.priority === aPriority));
        if (commonFilters.length > 0) {
            for (const filter of commonFilters) {
                const result = filter.sort(a, b);
                if (result !== 0) {
                    if (config.debug?.sorting) console.error(`[SORT] ${a.flight} vs ${b.flight}: ${filter.id} sort => ${result}`);
                    return result;
                }
            }
            if (config.debug?.sorting) console.error(`[SORT] ${a.flight} vs ${b.flight}: common filters [${commonFilters.map((f) => f.id).join(',')}] all returned 0, using distance`);
        } else {
            if (config.debug?.sorting) {
                const aFilterNames = aFilters
                        .filter((f) => f.priority === aPriority)
                        .map((f) => f.id)
                        .join(','),
                    bFilterNames = bFilters
                        .filter((f) => f.priority === bPriority)
                        .map((f) => f.id)
                        .join(',');
                console.error(`[SORT] ${a.flight} vs ${b.flight}: no common filters at priority ${aPriority} (${aFilterNames} vs ${bFilterNames}), using distance`);
            }
        }
        return AircraftData.sortByDistance(a, b);
    });

    if (config.debug?.sorting && sorted.length > 0) {
        console.error('\n[SORT] Final order:');
        sorted.slice(0, 10).forEach((aircraft, idx) => {
            const filters = aircraft.calculated._matchedFilters.map((f) => `${f.id}:${f.priority}`).join(',');
            const distance = aircraft.calculated.distance?.toFixed(1) || '?';
            console.error(`[SORT] ${idx + 1}. ${aircraft.flight} - filters: [${filters}] - ${distance}km`);
            aircraft.calculated._matchedFilters.forEach((filter) => {
                const debugInfo = filter?.debug('sorting', aircraft);
                if (debugInfo) console.error(`[SORT]    └─ ${filter.id}: ${debugInfo}`);
            });
        });
        console.error('');
    }

    return sorted;
}

function _flightsProcessStats(filter, aircrafts) {
    const list = aircrafts.filter((a) => filter.evaluate(a));
    return {
        ...tools.formatStatsList(filter.id, list),
        ...filter.getStats?.(aircrafts, list),
    };
}
function flightsProcessStats(filters, aircrafts) {
    const { filterSet } = filters;
    return Object.fromEntries(filterSet.map((filter) => [filter.id, _flightsProcessStats(filter, aircrafts)]));
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

let preprocess_exclude;
async function flightsFetch(config, flights) {
    const data = await flights.fetch(config.link);
    if (config?.exclude) {
        if (!preprocess_exclude && config.exclude) preprocess_exclude = new Set(config.exclude);
        if (preprocess_exclude && data.aircraft) data.aircraft = data.aircraft.filter((aircraft) => !aircraft.flight || !preprocess_exclude.has(aircraft.flight));
    }
    return data;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------

function flightsPreprocess(extra, aircraftList) {
    const { lat, lon } = extra.location;
    for (const aircraft of aircraftList) {
        aircraft.calculated = {};
        if (!aircraft.lat && !aircraft.lon && aircraft.lastPosition?.lat && aircraft.lastPosition?.lon) {
            aircraft.lat = aircraft.lastPosition.lat;
            aircraft.lon = aircraft.lastPosition.lon;
            aircraft.calculated.position = true;
        }
        if (aircraft.lat && aircraft.lon) {
            aircraft.calculated.distance = tools.calculateDistance(lat, lon, aircraft.lat, aircraft.lon).distance;
            if (aircraft.track) aircraft.calculated.positionRelative = tools.calculateRelativePosition(lat, lon, aircraft.lat, aircraft.lon, aircraft.track);
        }
        aircraft.calculated.altitude = aircraft.alt_baro ?? aircraft.alt_geom;
        if (aircraft.calculated.altitude === 'ground') aircraft.calculated.altitude = 0;
        if (aircraft.calculated.altitude === null || typeof aircraft.calculated.altitude !== 'number') delete aircraft.calculated.altitude;
    }
    return aircraftList;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------

async function flightsObtain(config, flights, filters, extra) {
    try {
        const data = await flightsFetch(config, flights);
        const receivedAircraft = data.aircraft;
        const aircraft = flightsPreprocess(extra, receivedAircraft);
        const filteredAircraft = await flightsProcess(filters, aircraft);
        const stat = {
            receivedAircraftCount: receivedAircraft.length,
            filteredAircraftCount: filteredAircraft.length,
            filterStats: flightsProcessStats(filters, filteredAircraft),
            flights: flights.getStats(),
        };
        const now = Date.now();
        aircraft.forEach((a) => (a.calculated.timestamp_updated = now));
        return { data: { ...data, aircraft }, stat, filteredAircraft };
    } catch (e) {
        console.error(e);
        return {
            stat: {
                error: e.message,
            },
        };
    }
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------

const flightCache = {};
const flightHistory = {};

function flightHistoryUpdate(hexes) {
    const timestamp_expired = Date.now() - CACHE_EXPIRY_TIME * 1000;
    Object.entries(flightCache)
        .filter(([_, entry]) => timestamp_expired > entry.calculated.timestamp_updated)
        .forEach(([hex, _]) => {
            delete flightCache[hex];
            delete flightHistory[hex];
        });
    Object.entries(flightCache)
        .filter(([hex, _]) => !hexes.has(hex))
        .forEach(([hex, entry]) => {
            entry.processing.missed_updates += 1;
            entry.processing.consecutive_misses += 1;
            entry.processing.consecutive_appearances = 0;
            if (flightHistory[hex]) entry.calculated.trajectoryData = flightHistory[hex].trail;
        });
}

function flightHistoryStats() {
    const hexes = Object.keys(flightHistory);
    if (hexes.length === 0) return { tracked: 0, entries: 0 };
    let totalTrailEntries = 0,
        oldestTimestamp = Infinity,
        newestTimestamp = -Infinity;
    hexes.forEach((hex) => {
        const { trail } = flightHistory[hex];
        totalTrailEntries += trail.length;
        if (trail.length > 0) {
            const firstTimestamp = trail[0].timestamp;
            const lastTimestamp = trail[trail.length - 1].timestamp;
            if (firstTimestamp < oldestTimestamp) oldestTimestamp = firstTimestamp;
            if (lastTimestamp > newestTimestamp) newestTimestamp = lastTimestamp;
        }
    });
    const avgTrailLength = totalTrailEntries / hexes.length;
    const oldestAge = oldestTimestamp === Infinity ? 0 : Math.round((Date.now() - oldestTimestamp) / 1000);
    const newestAge = newestTimestamp === -Infinity ? 0 : Math.round((Date.now() - newestTimestamp) / 1000);
    return { tracked: hexes.length, entries: totalTrailEntries, avg: Math.round(avgTrailLength * 10) / 10, oldest: oldestAge, newest: newestAge };
}

function flightHistoryStatsString({ tracked, entries, avg, oldest, newest }) {
    return `tracked=${tracked}, entries=${entries}${avg === undefined ? '' : ', avg=' + avg}${oldest === undefined || newest === undefined ? '' : ', age=' + tools.formatSecondsNicely(oldest) + '/' + tools.formatSecondsNicely(newest)}`;
}

function flightsTrack(data) {
    if (data.aircraft?.length > 0) {
        const now = Date.now();
        const currentHexes = new Set();
        data.aircraft
            .filter((aircraft) => aircraft.hex)
            .forEach((aircraft) => {
                const { hex } = aircraft;
                currentHexes.add(hex);
                if (!flightHistory[hex])
                    flightHistory[hex] = {
                        trail: [],
                        maxTrailSize: 20, // Keep last 20 snapshots
                        maxTrailAge: 10 * 60 * 1000, // Keep 10 minutes of history
                    };
                // eslint-disable-next-line no-unused-vars
                const { calculated, ...aircraftWithoutCalculated } = aircraft;
                const snapshot = { ...aircraftWithoutCalculated };
                const history = flightHistory[hex];
                history.trail.push({ timestamp: now, snapshot });
                const cutoffTime = now - history.maxTrailAge;
                history.trail = history.trail.filter((entry) => entry.timestamp >= cutoffTime);
                if (history.trail.length > history.maxTrailSize) history.trail = history.trail.slice(-history.maxTrailSize);
                // eslint-disable-next-line unicorn/consistent-destructuring
                aircraft.calculated.trajectoryData = history.trail;
                const cachedAircraft = flightCache[hex];
                flightCache[hex] = {
                    ...aircraft,
                    calculated: {
                        ...cachedAircraft?.calculated,
                        // eslint-disable-next-line unicorn/consistent-destructuring
                        ...aircraft.calculated,
                        trajectoryData: history.trail,
                    },
                    processing: {
                        first_seen: cachedAircraft?.processing?.first_seen || now,
                        missed_updates: cachedAircraft?.processing?.missed_updates || 0,
                        appearances: (cachedAircraft?.processing?.appearances || 0) + 1,
                        consecutive_misses: 0,
                        consecutive_appearances: (cachedAircraft?.processing?.consecutive_appearances || 0) + 1,
                    },
                };
            });
        flightHistoryUpdate(currentHexes);
        data = { ...data, aircraft: Object.values(flightCache) };
    }
    return data;
}

function flightsStatus(flights) {
    const { receivedAircraftCount: received, filteredAircraftCount: filtered, flights: flightStats, error } = flights;
    const cached = Object.keys(flightCache).length;
    const stored = flightHistoryStats();
    let status, text;
    if (flightStats) {
        const { requests, successful, failed, successRate, mappingStats } = flightStats;
        status = {
            received,
            filtered,
            cached,
            stored,
            fetcher: {
                requests,
                successful,
                failed,
                successRate,
            },
            mappings: mappingStats
                ? {
                      size: mappingStats.mapSize,
                      uniqueFlights: mappingStats.uniqueFlights,
                      hitRate: mappingStats.hitRate,
                      withData: mappingStats.withData,
                      bySource: mappingStats.bySource,
                      fetch: {
                          queued: mappingStats.fetch.queued,
                          total: mappingStats.fetch.total,
                          success: mappingStats.fetch.fetched,
                          failed: mappingStats.fetch.failed,
                          rate: mappingStats.fetch.successRate,
                      },
                  }
                : undefined,
        };
        const fetcherInfo = `requests=${requests}, success=${successful}/${successRate}`;
        const mappingInfo = mappingStats
            ? `, mappings=${mappingStats.mapSize}/${mappingStats.uniqueFlights}/${mappingStats.hitRate}${mappingStats.oldest ? '/' + tools.formatSecondsNicely(mappingStats.oldest.age) : ''}` +
              `${mappingStats.bySource ? ' (L:' + mappingStats.bySource.local + '/O:' + mappingStats.bySource.online + ')' : ''}` +
              `${mappingStats.fetch ? ', fetch=' + mappingStats.fetch.total + '/' + (mappingStats.fetch.successRate || '0%') + '/' + mappingStats.fetch.queued : ''}`
            : '';
        text = `received=${received}, filtered=${filtered}, cached=${cached}, stored=(${flightHistoryStatsString(stored)}), fetched=(${fetcherInfo})${mappingInfo})`;
    } else if (error) {
        status = { error };
        text = `ERROR: ${error}`;
    }
    return { status, text };
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// build alerts, format them according to the filters that generated them and prioritise them; insert or remove them (if they lapse or expire)
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

const alertsActive = {};

function alertsBuilder(config, filters, processedData, stats) {
    const { filterMap } = filters;
    const time = Date.now();
    const alerts = Object.keys(filterMap)
        .filter((key) => stats[key])
        .flatMap((key) =>
            processedData.aircraft
                .filter((aircraft) => filterMap[key].evaluate(aircraft))
                .map((aircraft) => {
                    const id = `${key}-${aircraft.hex}`;
                    if (alertsActive[id]) {
                        alertsActive[id].timeLast = time;
                        return undefined;
                    }
                    const alert = {
                        id,
                        time,
                        timeFormatted: new Date(time).toISOString(),
                        type: key,
                        ...alertMeta(filterMap[key].format, aircraft),
                        flight: aircraft.flight,
                        timeLast: time,
                    };
                    if (alert.warn && config?.warn_suppress?.[key]) alert.warn = false;
                    alertsActive[id] = alert;
                    return alert;
                })
                .filter(Boolean)
        );
    // should really remove if they do not come through the filter again and a specific threshold
    const alertsRemoved = Object.entries(alertsActive)
        .filter(([_, alert]) => time - alert.timeLast > ALERT_EXPIRY_TIME * 1000)
        .map(([id, _]) => {
            delete alertsActive[id];
            return id;
        });
    return {
        alertsSource: processedData.aircraft,
        alertsInserted: alerts,
        alertsRemoved,
        alertsActive: Object.values(alertsActive),
        alertsStats: Object.entries(Object.values(alertsActive).reduce((list, alert) => ({ ...list, [alert.type]: (list[alert.type] || 0) + 1 }), {})).sort((a, b) => filterMap[a[0]].priority - filterMap[b[0]].priority),
    };
}

function alertMeta(format, aircraft) {
    const aircraftType = aircraft.category || '';
    const priorityType =
        aircraft.calculated.emergency.hasEmergency || aircraft.calculated.military.isMilitary || (aircraft.calculated.vicinity.isProximate && (aircraft.calculated.landing.isLanding || aircraft.calculated.lifting.isLifting));

    const { positionRelative: position, distance, altitude } = aircraft.calculated;
    const positionInfo = position ? ` (${distance.toFixed(1)}km ${position.cardinal} ${tools.formatAltitude(altitude)})` : '';
    const aircraftInfo = aircraftType ? ` <${tools.formatCategoryCode(aircraftType)}>` : '';

    const meta = {
        text: `detected`,
        warn: priorityType,
        position,
        altitude,
        speed: aircraft.gs ? `${Math.round(aircraft.gs)} kts` : undefined,
        aircraftType,
    };

    const details = { ...meta, ...format(aircraft) };
    if (details.text) details.text += `${aircraftInfo}${positionInfo}`;

    return details;
}

function alertsStatus(alerts) {
    const { alertsInserted, alertsRemoved, alertsActive, alertsStats } = alerts;
    const status = {
        inserted: alertsInserted.length,
        removed: alertsRemoved.length,
        active: alertsActive.length,
        byType: Object.values(alertsActive).reduce((list, alert) => ({ ...list, [alert.type]: (list[alert.type] || 0) + 1 }), {}),
    };
    const text = `new=${alertsInserted.length}, all=${alertsActive.length}: ${alertsStats.map(([key, count]) => key + '=' + count).join(', ')}`;
    return { status, text };
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// build status
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

function statusBuilder(_config, sources) {
    const time = new Date(),
        timeFormatted = time.toISOString();

    const status = {};
    if (sources.flights) status.flights = flightsStatus(sources.flights);
    if (sources.alerts) status.alerts = alertsStatus(sources.alerts);
    if (sources.system) status.system = systemStatus(sources.system);

    return { time: time.getTime(), timeFormatted, status };
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// initialise the system, then run the loop and generate stats
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

function systemStatus(system) {
    const { okay, error, empty } = system.counts;
    const text = `okay=${okay}, error=${error}, empty=${empty}, started=${system.started}`;
    const status = system;
    return { status, text };
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------

async function systemLoop(config, system) {
    try {
        const { data, stat, filteredAircraft } = await flightsObtain(config.flights, system.flights, system.filters, { location: config.location });
        if (data) {
            const processedData = flightsTrack(data);
            const filteredData = { ...processedData, aircraft: filteredAircraft };
            const alerts = alertsBuilder(config.alerts, system.filters, filteredData, stat.filterStats);
            if (alerts) system.deliver.deliverAlerts(alerts);
            system.stats.counts.okay++;
            const status = statusBuilder(config, { alerts, flights: stat, system: system.stats });
            if (status) system.deliver.deliverStatus(status);
        } else {
            system.stats.counts.empty++;
            console.error(`loop: no data received:`, stat?.error || 'no error details');
        }
    } catch (e) {
        system.stats.counts.error++;
        console.error(`loop: exception:`, e);
    }
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------

function systemInit(config) {
    const data = { location: config.location, range: config.range_max, vicinity: config.filters.vicinity.distance };
    const flights = flightsInit(config.flights);
    const airports = airportsInit(config.airports, data);
    const further = furtherInit(config.further);
    const filters = filterInit(config.filters, { data: { ...data, ...further, airports } });
    const deliver = deliverInit(config.deliver);
    return { flights, airports, further, filters, deliver };
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

console.error('***');
// eslint-disable-next-line unicorn/prefer-array-find
const args = process.argv.slice(2).filter((arg) => !arg.startsWith('--'));
const { hostname } = require('os');
const configFile = args[0] || `./config.${hostname}.js`;
const debugSort = process.argv.includes('--debug-sort');
console.error(`config: ${configFile}`);
const config = require(configFile);
if (debugSort) {
    config.debug = config.debug || {};
    config.debug.sorting = true;
}
console.error('config:', config);
const system = systemInit(config);
system.stats = {
    started: new Date().toISOString(),
    counts: { okay: 0, error: 0, empty: 0 },
};
const loopInterval = setInterval(() => systemLoop(config, system), CYCLE_SCAN_TIME * 1000);
const shutdown = async () => {
    console.error('\nSHUTDOWN');
    clearInterval(loopInterval);
    system?.flights?.getMappings()?.destroy();
    await system?.deliver?.destroy();
    // eslint-disable-next-line n/no-process-exit
    process.exit(0);
};
process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);
systemLoop(config, system);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------------------------------------------------------
